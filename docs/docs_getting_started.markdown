# Начало работы

## Установка

1. Клонируйте репозиторий:
   ```bash
   git clone https://github.com/yourusername/telegram-bot-builder.git
   cd telegram-bot-builder
   Установите зависимости:
   bash
   ```

Свернуть

Перенос

Исполнить

Копировать
pip install -r requirements.txt
Создайте файл .env в корневой директории и добавьте токен бота:
text

Свернуть

Перенос

Копировать
BOT_TOKEN=your_telegram_bot_token
Создайте файл config_business_card.json или используйте существующий шаблон.
Сгенерируйте бота:
bash

Свернуть

Перенос

Исполнить

Копировать
python generate.py
Запустите бота:
bash

Свернуть

Перенос

Исполнить

Копировать
python generated_bot.py
Конфигурация
Создайте файл config_business_card.json с конфигурацией бота. Пример:

json

Свернуть

Перенос

Копировать
{
"bot_name": "MyBot",
"handlers": [
{
"command": "/start",
"text": "Привет!",
"reply_markup": {
"inline_keyboard": [
[{"text": "Мой сайт", "url": "https://example.com"}]
]
}
}
]
}
Поддерживаются команды /start, /help, /faq, /create_bot, /list_bots, /edit_bot, /delete_bot, /menu.
Используйте JSON для настройки inline-кнопок.
Использование CLI
Запустите python cli.py --help для списка команд. Пример создания бота-визитки:

bash

Свернуть

Перенос

Исполнить

Копировать
python cli.py business_card --name MyBot --token your_token --welcome "Привет!" --help-text "Используйте /start"
Тестирование
Запустите тесты:

bash

Свернуть

Перенос

Исполнить

Копировать
pytest
text

Свернуть

Перенос

## Копировать

### 3. `docs_templates.markdown`

Шаблоны
Визитка
Шаблон для представления информации о пользователе или компании с inline-кнопками (сайт, email, телефон).

FAQ
Шаблон для ответов на часто задаваемые вопросы с использованием callback-кнопок.

Пример конфигурации FAQ:

json

Свернуть

Перенос

Копировать
{
"command": "/faq",
"text": "Часто задаваемые вопросы:",
"reply_markup": {
"inline_keyboard": [[{ "text": "Вопрос 1", "callback_data": "faq_q1" }]],
"faq_responses": {
"faq_q1": "Ответ на вопрос 1"
}
}
}
Конструктор блоков
Шаблон поддерживает динамическое создание блоков через команды /add_block и /edit_block.

/add_block: Позволяет добавить новый блок (сообщение, команда, клавиатура) через интерактивный интерфейс.
Выберите тип блока (сообщение, команда, клавиатура).
Укажите команду (для типа "команда").
Введите текст блока.
Добавьте inline-кнопки в формате JSON (или пропустите с помощью /skip).
/edit_block: Позволяет редактировать существующий блок.
Выберите блок из списка.
Обновите команду, текст или кнопки (или пропустите с помощью /skip).
Пример добавления блока через /add_block:

Введите /add_block.
Выберите "Команда".
Введите /mycommand.
Введите текст: "Это мой новый блок!".
Введите JSON для кнопок: [ [{"text": "Кнопка", "callback_data": "test"}] ].
text

Свернуть

Перенос

## Копировать

### 4. `docs_architecture.markdown`

Архитектурная документация
Общая структура
Telegram Bot Builder представляет собой модульную систему для создания и управления Telegram-ботами. Архитектура включает следующие ключевые компоненты:

1. Модули и классы
   Bot: Основной класс для взаимодействия с Telegram API через библиотеку aiogram. Управляет запуском бота и обработкой сообщений.
   Dispatcher: Координирует обработчики команд и callback-запросов, интегрирует состояния через FSM (Finite State Machine).
   StatesGroup: Определяет состояния для интерактивного создания ботов (например, BotCreationForm, FAQCreationForm).
   BotConfig: Хранит конфигурацию бота (имя, обработчики, токен) и обеспечивает валидацию через validate_config и validate_block_schema.
   Database: Управляет хранением данных пользователей и конфигураций в SQLite (bot_users.db).
2. Схема взаимодействия
   Telegram-интерфейс: Пользователь отправляет команды (/start, /create_bot), Dispatcher обрабатывает их, используя состояния из StatesGroup, и сохраняет конфигурации в Database.
   CLI: Принимает аргументы через argparse, вызывает генерацию кода и запуск бота.
   Генерация кода: Модуль generate.py использует Jinja2 для рендеринга шаблона bot_template.py.j2 на основе конфигурации.
3. Диаграмма классов
   См. файл class_diagram.puml для визуализации связей между Bot, Dispatcher, StatesGroup, BotConfig и Database.

4. Потоки выполнения
   Создание бота:
   Пользователь выбирает шаблон (визитка/FAQ) через /create*bot.
   FSM собирает данные (имя, токен, текст) и формирует конфигурацию.
   generate.py генерирует код и сохраняет его в bots/bot*<id>.py.
   Бот запускается как подпроцесс с сохранением PID в базе данных.
   Удаление бота:
   Пользователь вводит ID через /delete_bot.
   Database удаляет запись, а процесс завершается через psutil.
5. Ограничения и улучшения
   Текущая архитектура не поддерживает масштабирование для множества пользователей (однопоточный запуск).
   Отсутствует веб-интерфейс (GUI), что требует доработки для соответствия ТЗ.
   Рекомендуется добавить кэширование конфигураций и обработку ошибок сети.
   text

Свернуть

Перенос

## Копировать

### 5. `README.md`

Telegram Bot Builder
Telegram Bot Builder — инструмент для создания и управления Telegram-ботами с использованием шаблонов и автоматической генерации кода.

Описание
Проект позволяет разработчикам и новичкам быстро создавать ботов через Telegram-интерфейс или CLI, используя шаблоны (визитка, FAQ) и настраиваемые конфигурации.

Установка
Клонируйте репозиторий:
bash

Свернуть

Перенос

Исполнить

Копировать
git clone https://github.com/yourusername/telegram-bot-builder.git
cd telegram-bot-builder
Установите зависимости:
bash

Свернуть

Перенос

Исполнить

Копировать
pip install -r requirements.txt
Настройте токен бота в .env:
text

Свернуть

Перенос

Копировать
BOT_TOKEN=your_telegram_bot_token
Запуск
Генерация бота:
bash

Свернуть

Перенос

Исполнить

Копировать
python generate.py
Запуск бота:
bash

Свернуть

Перенос

Исполнить

Копировать
python generated_bot.py
Использование CLI:
bash

Свернуть

Перенос

Исполнить

Копировать
python cli.py --help
Документация
Начало работы
Шаблоны
Архитектура
Тестирование
Запустите тесты:

bash

Свернуть

Перенос

Исполнить

Копировать
pytest
Лицензия
MIT License (добавить файл LICENSE).
